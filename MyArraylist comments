import java.util.Iterator;

public class MyArraylist<T> implements MyList<T>, Iterable<T> {
    private static final int DEFAULT_CAPACITY = 10;
    private Object[] elements;
    private int size;
    private int capacity;

    //here we say what is capacity of our arraylist
    public MyArraylist() {
        this.capacity = DEFAULT_CAPACITY;
        this.elements = new Object[capacity];
    }

    public MyArraylist(int capacity) {
        this.capacity = capacity;
        this.elements = new Object[capacity];
    }
    // here we write code about how capacity will increase
    private void increaseBuffer() {
        int newCapacity = this.capacity * 2;
        Object[] newElements = new Object[newCapacity];
        System.arraycopy(this.elements, 0, newElements, 0, this.size);
        this.elements = newElements;
        this.capacity = newCapacity;
    }
    // here how we will swap items
    private void swap(Object[] arr, int i, int j) {
        Object temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    // this is about length of our arraylist, how many elements are present
    public int size() {
        return size;
    }
    // this is about does arraylist contain item or not
    public boolean contains(T item) {
        return indexOf(item) != -1;
    }
    // if length becomes more than capacity we enlarge it
    public void add(T item) {
        if (size >= capacity) {
            increaseBuffer();
        }
        elements[size++] = item;
    }

    // again if we need we increase capacity, then into index + 1 we store item
    public void add(T item, int index) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }
        if (size >= capacity) {
            increaseBuffer();
        }
        System.arraycopy(elements, index, elements, index + 1, size - index);
        elements[index] = item;
        size++;
    }
    // here how we remove item
    public boolean remove(T item) {
        int index = indexOf(item);
        if (index == -1) {
            return false;
        }
        remove(index);
        return true;
    }
    // remove items so making null instead of item for that place
    public T remove(int index) throws IndexOutOfBoundsException {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        T item = (T) elements[index];
        System.arraycopy(elements, index + 1, elements, index, size - index - 1);
        elements[--size] = null;
        return item;
    }
    // iterating through all items and removing all of them
    public void clear() {
        for (int i = 0; i < size; i++) {
            elements[i] = null;
        }
        size = 0;
    }
    // get
    public T get(int index) throws IndexOutOfBoundsException {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        return (T) elements[index];
    }
    // get index of element
    public int indexOf(T item) {
        for (int i = 0; i < size; i++) {
            if (elements[i].equals(item)) {
                return i;
            }
        }
        return -1;
    }

    public int lastIndexOf(T item) {
        for (int i = size - 1; i >= 0; i--) {
            if (elements[i].equals(item)) {
                return i;
            }
        }
        return -1;
    }
    //bubble sort
    public void sort() {
        for (int i = 0; i < size - 1; i++) {
            for (int j = 0; j < size - i - 1; j++) {
                if (((Comparable<T>) elements[j]).compareTo((T) elements[j + 1]) > 0) {
                    swap(elements, j, j + 1);
                }
            }
        }
    }
    public Iterator<T> iterator() {
        return new MyArrayListIterator();
    }
    // iterator class
    private class MyArrayListIterator implements Iterator<T> {
        private int currentIndex = 0;

        public boolean hasNext() {
            return currentIndex < size;
        }

        public T next() {
            if (!hasNext()) {
                throw new java.util.NoSuchElementException();
            }
            return (T) elements[currentIndex++];
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

}
